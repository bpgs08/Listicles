{"ast":null,"code":"var _jsxFileName = \"/Users/brian/Library/Mobile Documents/com~apple~CloudDocs/Github/teampay/src/components/todoList/TodoList.js\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Todo from \"../todo\";\nimport SortImage from \"../../assets/icons/sort-up-solid.svg\";\nimport HeaderElements from \"../headerElements\";\nimport { colors, space, media } from \"../../utils/theme\";\nconst TodoList = React.memo(({\n  newTodos,\n  allTodos,\n  completedTodos,\n  sorted,\n  markActive,\n  markCompleteFromNew,\n  markCompleteFromAll,\n  sortByDueDate\n}) => {\n  const [showCompleted, setShowCompleted] = useState(false);\n\n  const hideCompletedTasks = () => {\n    setShowCompleted(!showCompleted);\n  };\n\n  return /*#__PURE__*/React.createElement(TodoListContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, newTodos.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TodoTitle, {\n    type: 8,\n    bold: true,\n    color: colors.purple,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, \"NEW TASKS\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, newTodos.map(todo => /*#__PURE__*/React.createElement(Todo, Object.assign({\n    key: todo.id\n  }, todo, {\n    onClick: () => markCompleteFromNew(todo.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }))))), allTodos.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FlexContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TodoTitle, {\n    type: 8,\n    bold: true,\n    color: colors.purple,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  }, \"ALL TASKS\"), /*#__PURE__*/React.createElement(SortByContainer, {\n    onClick: sortByDueDate,\n    SortImage: SortImage,\n    sorted: sorted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }\n  }, \"Sort by: Due Date\")), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, allTodos.map(todo => /*#__PURE__*/React.createElement(Todo, Object.assign({\n    key: todo.id\n  }, todo, {\n    onClick: () => markCompleteFromAll(todo.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }))))), completedTodos.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HideAndShow, {\n    onClick: hideCompletedTasks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, showCompleted ? \"Hide Completed Tasks\" : \"Show Completed Tasks\"), showCompleted && /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, completedTodos.map(todo => /*#__PURE__*/React.createElement(Todo, Object.assign({\n    key: todo.id\n  }, todo, {\n    onClick: () => markActive(todo.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }\n  }))))));\n});\nconst SortByContainer = styled.div`\n  margin-left: auto;\n  font-size: 14px;\n  cursor: pointer;\n  color: ${colors.purple};\n  &:after {\n    display: inline-block;\n    content: \" \";\n    background-image: url(${SortImage});\n    background-size: ${space[3]} ${space[3]};\n    height: ${space[3]};\n    width: ${space[3]};\n    background-repeat: no-repeat;\n    ${props => !props.sorted ? `transform: rotate(180deg);top: 5%;` : `top: 25%;`};\n    position: relative;\n  }\n`;\nconst FlexContainer = styled.div`\n  display: flex;\n`;\nconst TodoTitle = styled(HeaderElements)`\n  margin-bottom: ${space[2]};\n`;\nconst HideAndShow = styled.div`\n  text-align: center;\n  margin-bottom: ${space[2]};\n  cursor: pointer;\n  text-decoration: underline;\n  color: ${colors.grey};\n`;\nconst TodoListContainer = styled.div`\n  max-width: 300px;\n  ${media.tablet`\n    max-width: 700px;\n  `}\n  margin: ${space[4]} auto 0px auto;\n`;\nexport default TodoList;","map":{"version":3,"sources":["/Users/brian/Library/Mobile Documents/com~apple~CloudDocs/Github/teampay/src/components/todoList/TodoList.js"],"names":["React","useState","styled","Todo","HeaderElements","colors","space","media","TodoList","memo","newTodos","allTodos","completedTodos","sorted","markActive","markCompleteFromNew","markCompleteFromAll","sortByDueDate","showCompleted","setShowCompleted","hideCompletedTasks","length","purple","map","todo","id","SortImage","SortByContainer","div","props","FlexContainer","TodoTitle","HideAndShow","grey","TodoListContainer","tablet"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Todo from \"../todo\";\nimport SortImage from \"../../assets/icons/sort-up-solid.svg\";\nimport HeaderElements from \"../headerElements\";\nimport { colors, space, media } from \"../../utils/theme\";\n\nconst TodoList = React.memo(\n  ({\n    newTodos,\n    allTodos,\n    completedTodos,\n    sorted,\n    markActive,\n    markCompleteFromNew,\n    markCompleteFromAll,\n    sortByDueDate,\n  }) => {\n    const [showCompleted, setShowCompleted] = useState(false);\n    const hideCompletedTasks = () => {\n      setShowCompleted(!showCompleted);\n    };\n\n    return (\n      <TodoListContainer>\n        {newTodos.length > 0 && (\n          <>\n            <TodoTitle type={8} bold={true} color={colors.purple}>\n              NEW TASKS\n            </TodoTitle>\n            <ul>\n              {newTodos.map((todo) => (\n                <Todo\n                  key={todo.id}\n                  {...todo}\n                  onClick={() => markCompleteFromNew(todo.id)}\n                />\n              ))}\n            </ul>\n          </>\n        )}\n\n        {allTodos.length > 0 && (\n          <>\n            <FlexContainer>\n              <TodoTitle type={8} bold={true} color={colors.purple}>\n                ALL TASKS\n              </TodoTitle>\n              <SortByContainer\n                onClick={sortByDueDate}\n                SortImage={SortImage}\n                sorted={sorted}\n              >\n                Sort by: Due Date\n              </SortByContainer>\n            </FlexContainer>\n            <ul>\n              {allTodos.map((todo) => (\n                <Todo\n                  key={todo.id}\n                  {...todo}\n                  onClick={() => markCompleteFromAll(todo.id)}\n                />\n              ))}\n            </ul>\n          </>\n        )}\n\n        {completedTodos.length > 0 && (\n          <>\n            <HideAndShow onClick={hideCompletedTasks}>\n              {showCompleted ? \"Hide Completed Tasks\" : \"Show Completed Tasks\"}\n            </HideAndShow>\n            {showCompleted && (\n              <ul>\n                {completedTodos.map((todo) => (\n                  <Todo\n                    key={todo.id}\n                    {...todo}\n                    onClick={() => markActive(todo.id)}\n                  />\n                ))}\n              </ul>\n            )}\n          </>\n        )}\n      </TodoListContainer>\n    );\n  }\n);\n\nconst SortByContainer = styled.div`\n  margin-left: auto;\n  font-size: 14px;\n  cursor: pointer;\n  color: ${colors.purple};\n  &:after {\n    display: inline-block;\n    content: \" \";\n    background-image: url(${SortImage});\n    background-size: ${space[3]} ${space[3]};\n    height: ${space[3]};\n    width: ${space[3]};\n    background-repeat: no-repeat;\n    ${(props) =>\n      !props.sorted ? `transform: rotate(180deg);top: 5%;` : `top: 25%;`};\n    position: relative;\n  }\n`;\n\nconst FlexContainer = styled.div`\n  display: flex;\n`;\n\nconst TodoTitle = styled(HeaderElements)`\n  margin-bottom: ${space[2]};\n`;\n\nconst HideAndShow = styled.div`\n  text-align: center;\n  margin-bottom: ${space[2]};\n  cursor: pointer;\n  text-decoration: underline;\n  color: ${colors.grey};\n`;\n\nconst TodoListContainer = styled.div`\n  max-width: 300px;\n  ${media.tablet`\n    max-width: 700px;\n  `}\n  margin: ${space[4]} auto 0px auto;\n`;\n\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}